所有的铺垫都是为了最重要的事——关系型数据库
    数据结构
        某类对象内部的属性表示
            属性列出，每行代表一个实例，形式上是二维表
                relation
                    某个类型的自有属性的相互关系，所有这个类型的实例是笛卡尔积的子集
                某行tuple
                    看的角度
                        二维表的行
                    概念的角度
                        一个从数据的关联性——属于一个实例进行描述
                某列attribute
                    看的角度
                        二维表的列
                    概念的角度
                        描述一类对象的多个属性
                    名和值
                        属性名：每列属性1个
                        属性值：每列属性1个属性值的集合
                key
                    区分一类对象中每个实例是独特唯一的方法——用属性集来标志
                domain
                    相同数据类型的值的集合，用来限定属性的值的范围
        不同类的对象之间表示
    操纵
        对集合的CRUD
            操作对象是笛卡尔积，即关系
            操作结果也是笛卡尔积，即关系
    完整性约束
        完整性
            数据的存活期间，对一个数据的精确表示、其符合约束条件的有效的前后一致性的一种承诺
                实体完整性
                参照完整性
                用户定义的完整性
        基本规范
            分量不可分
                每一个唯一标志某个实例的某个属性的值，是不能再次进行属性拆分，这样笛卡尔积的结果中包含集合。why?
    pros
        1. 基于严格数学概念
            与格式化模型相比，更省心，不用关心数据具体怎么操作路径访问内存等而是直接告诉计算机我想要什么
        2. 概念单一
            这个需要来自于人的弱点之——难以理解复杂的事物
        3. 无需关心底层，简化操作
            路径、数据独立性
    cons
        1. 优点一定是伴随着缺点的
            1. 基于数学概念意味着抽象层次远高于现实，需要前置数学概念、严谨也意味着不包容
            2. 概念单一意味着你简单了就要有人复杂——开发数据库的人要掌握的概念从底层冯诺伊曼结构的物理机器到你简单的概念，巨大的鸿沟由相关研发人员弥补
            3. 无需关心底层意味着，底层也无法关心，而底层往往意味着性能和掌控，所以性能较格式化模型差

        
