数据模型
    what
        对现实数据特征的抽象（保留核心特征，省略细枝末节）
    为了什么
        描述数据、组织数据、操作数据
    要求
        较为真实模拟现实
            即抽象后留下的特征是最重要最能说明问题的一部分
        面向人
            易读易理解易操作，大家用的才开心吗，大部分人都难以理解还怎么大规模使用
        面向机器
            能实现（有计算机解决不了的问题，恩，其实应该是人解决不了，复杂度超过计算能力，新的解决方案没孵化出，怎么解决呢）
            省时省硬件省电。。。
    这些要求一定要全部实现吗
        不。。。要学会舍弃，因为现实不允许完美的圆。。
    组成要素
        数据结构，静态
            对象内部
            对象之间
        数据操作，动态
            对象（型）和实例（值）之上的操作和操作规则
            主要操作
                CRUD
                    确切含义，操作符号，操作规则（优先级、）
        数据的完整性约束
            数据的制约和依存规则，限定状态和状态的变化，为了数据的正确、有效和相容
            e.g.
                关系模型中的实体完整性和参照完整性
                特定的自定义的约束条件
    分类
        分类依据
            世界 => 人的想法 => 人能理解沟通的计算机能实现的高度抽象化模型 => 依赖计算机有什么物理硬件而建立的模型
                所以如果计算机足够智能，中间从世界到人的转化完全也可以由计算机自己来实现，因为从机器的逻辑模型到物理模型，现在已经是DBMS自动完成了
        子类
            概念模型，人的角度
                信息模型，按人的角度来看待世界的数据和建模，用来数据库设计
                    Entity
                        实体可抽象，可具体
                            抽象为人，具体为张三，都可以
                    Attribute
                    Key
                        标志Entity唯一的属性集合，注意是集合，即便是只有一个属性也是集合
                    Entity Type
                        当多个实体们的某些Attribute有重合的时候，可以抽象出这些属性成为一个众多实体们的类型实体
                    Entity Set
                        某个类型下的一些实体，称集合，集合代表有共性，无顺序
                    Relation
                        因为实体也可以是抽象后的类型也可以是具体化的值，所以所谓关系，有两个
                            内部
                                内部是实体集的多个属性间的关系，特殊一点即某个实体的多个属性间的关系
                            外部
                                外部是多个实体集之间的关系，特殊一点是多个实体之间的关系
                                    映射有方向
                                        即从A中的每个元素到B中的每个元素按照规则进行转化
                                        即B如果是A的最小映射集合，那么任何B的扩充集合，都满足A->B的映射规则
                                        即如果B中有一个元素b1，那么A中可以不存在元素能够产生b1
                                    大种类
                                        一对一
                                        一对多
                                        多对多
                实现
                    ER diagram
            物理和逻辑模型， 机器的角度
                逻辑模型
                    把人设计出来的错综复杂的概念模型按照固定的模型进行剪裁，比如都表示成面向对象OO模型或者都表示成对象的属性和属性间的关系模型
                        分类有有hierarchical，network，Relational，OO，OR, SS
                            格式化模型
                                层次和网状因为以树为基础，所以称格式化模型，从root节点出发能找到每一个子节点
                                    tree和多个tree，并且概念简单、实现也很高效
                                        为什么不流行了
                                            因为tree对现实世界的抽象不够，额外补充就会更复杂（net也是，因为对于使用者来说太复杂，人适合思考聚焦一部分信息（不管是深度还是广度），而不擅长全盘所有信息都要考虑相互作用）
                                        数据结构
                                            tree
                                        数据操纵
                                            CRUD
                                        完整性约束条件
                                            1. 没有parent不能插入节点，除了Root 节点
                                            2. 如果删除了parent，那么依赖于parent的所有children都要被删除
                                        cons
                                            很多现实数据非树
                                                比如多对多，需要拆成多个一对多
                                                多个parent
                                                    冗余存储（不一致性）
                                                    引入虚拟节点（实现复杂）
                                            查询child必须通过parent
                                    
                            关系模型
                                因为格式化模型的物理结构太复杂，改为关系型模型
                            面向对象
                                因为80年代面向对象的发展，关系型扩充为对象关系数据模型
                            半结构化、非结构化
                                因为后来Web的发展
                物理模型
                    计算机的角度数据最底层的抽象，数据在计算机上的存储和读取等